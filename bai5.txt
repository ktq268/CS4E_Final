class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        queue<pair<int, int>> rotten;
        int fresh = 0, time = 0;
        
        // Find all rotten oranges and count fresh oranges
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 2)
                    rotten.push({i, j});
                else if (grid[i][j] == 1)
                    fresh++;
            }
        }
        
        // Directions: up, down, left, right
        vector<pair<int, int>> dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        // BFS
        while (!rotten.empty() && fresh > 0) {
            int size = rotten.size();
            for (int i = 0; i < size; i++) {
                int x = rotten.front().first, y = rotten.front().second;
                rotten.pop();
                
                for (auto dir : dirs) {
                    int nx = x + dir.first, ny = y + dir.second;
                    if (nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny] == 1) {
                        grid[nx][ny] = 2;
                        fresh--;
                        rotten.push({nx, ny});
                    }
                }
            }
            time++;
        }
        
        return fresh == 0 ? time : -1;
    }
};